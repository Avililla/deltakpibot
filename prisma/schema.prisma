// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para Servidores (Guilds)
model Guild {
  id              String           @id @default(uuid()) // ID interno
  guildId         String           @unique // ID de Discord del servidor
  name            String // Nombre del servidor
  trackedChannels TrackedChannel[] // Canales configurados para trackeo
  trackedRoles    TrackedRole[] // Roles configurados para trackeo
  ownerid         String // ID del due침o del servidor
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  MentionRecord   MentionRecord[]
  UserContext     UserContext[]
}

// Modelo para Canales Trackeados
model TrackedChannel {
  id           String    @id @default(uuid())
  guild        Guild     @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade)
  guildId      String
  channelId    String    @unique
  name         String
  isIntensive  Boolean   @default(false)
  lastStoredAt DateTime?
  createdAt    DateTime  @default(now())
  threads      Threads[]
  mentions     MentionRecord[]
}

model Threads {
  id        String         @id @default(uuid())
  threadId  String         @unique
  channel   TrackedChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
  channelId String
  name      String
  createdAt DateTime       @default(now())
  mentions  MentionRecord[]
}

// Modelo para Roles Trackeados
model TrackedRole {
  id        String   @id @default(uuid()) // ID interno
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade) // Relaci칩n con Guild
  guildId   String
  roleId    String   @unique // ID de Discord del rol trackeado
  name      String // Nombre del rol
  createdAt DateTime @default(now())
}

// Modelo para Registrar Menciones (opcional)
model MentionRecord {
  id                      String         @id @default(uuid())
  guild                   Guild          @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade)
  guildId                 String
  channel                 TrackedChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade, onUpdate: Cascade)
  channelId               String
  thread                  Threads?       @relation(fields: [threadId], references: [threadId], onDelete: Cascade, onUpdate: Cascade)
  threadId                String?        // Se llena solo si la menci칩n es de un hilo (tipo 15)
  messageId               String
  mentionedId             String
  authorId                String
  mentionedName           String?
  authorName              String?
  createdAt               DateTime       @default(now())
  respondedAt             DateTime?
  closedResponseMessageId String?

  @@unique([messageId, guildId], name: "messageId_guildId")
}

model UserContext {
  id        String   @id @default(uuid())
  userId    String   @unique // Discord ID del usuario
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade, onUpdate: Cascade) // Relaci칩n con Guild
  guildId   String // Guild ID seleccionado
  updatedAt DateTime @updatedAt
}

// Cosas para la web
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
