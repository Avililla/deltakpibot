generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id              String           @id @default(uuid())
  guildId         String           @unique
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  ownerid         String
  MentionRecord   MentionRecord[]
  trackedChannels TrackedChannel[]
  trackedRoles    TrackedRole[]
  UserContext     UserContext[]
}

model TrackedChannel {
  id           String          @id @default(uuid())
  guildId      String
  channelId    String          @unique
  name         String
  channelType  Int
  isIntensive  Boolean         @default(false)
  createdAt    DateTime        @default(now())
  lastStoredAt DateTime?
  mentions     MentionRecord[]
  threads      Threads[]
  guild        Guild           @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model Threads {
  id        String          @id @default(uuid())
  threadId  String          @unique
  name      String
  createdAt DateTime        @default(now())
  channelId String
  mentions  MentionRecord[]
  channel   TrackedChannel  @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
}

model TrackedRole {
  id        String   @id @default(uuid())
  guildId   String
  roleId    String   @unique
  name      String
  createdAt DateTime @default(now())
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model MentionRecord {
  id                      String         @id @default(uuid())
  guildId                 String
  channelId               String
  mentionedId             String
  authorId                String
  createdAt               DateTime       @default(now())
  respondedAt             DateTime?
  authorName              String?
  mentionedName           String?
  messageId               String
  closedResponseMessageId String?
  threadId                String?
  channel                 TrackedChannel @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  guild                   Guild          @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  thread                  Threads?       @relation(fields: [threadId], references: [threadId], onDelete: Cascade)

  @@unique([messageId, guildId], name: "messageId_guildId")
}

model UserContext {
  id        String   @id @default(uuid())
  userId    String   @unique
  guildId   String
  updatedAt DateTime @updatedAt
  guild     Guild    @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserCapability {
  CAN_MANAGE_GUILDS
  CAN_VIEW_MENTOR_STATS
}